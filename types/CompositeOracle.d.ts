/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CompositeOracleInterface extends ethers.utils.Interface {
  functions: {
    "get(bytes)": FunctionFragment;
    "getDataParameter(address,address,bytes,bytes)": FunctionFragment;
    "name(bytes)": FunctionFragment;
    "peek(bytes)": FunctionFragment;
    "symbol(bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "get", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getDataParameter",
    values: [string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "peek", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "symbol", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDataParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;

  events: {};
}

export class CompositeOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: CompositeOracleInterface;

  functions: {
    get(data: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

    "get(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDataParameter(
      oracle1: string,
      oracle2: string,
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getDataParameter(address,address,bytes,bytes)"(
      oracle1: string,
      oracle2: string,
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    name(data: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "name(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    peek(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "peek(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    symbol(data: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "symbol(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  get(data: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  "get(bytes)"(
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDataParameter(
    oracle1: string,
    oracle2: string,
    data1: BytesLike,
    data2: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDataParameter(address,address,bytes,bytes)"(
    oracle1: string,
    oracle2: string,
    data1: BytesLike,
    data2: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  name(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  "name(bytes)"(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  peek(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  "peek(bytes)"(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  symbol(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  "symbol(bytes)"(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    get(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "get(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getDataParameter(
      oracle1: string,
      oracle2: string,
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDataParameter(address,address,bytes,bytes)"(
      oracle1: string,
      oracle2: string,
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    name(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    "name(bytes)"(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    peek(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "peek(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    symbol(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    "symbol(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    get(data: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "get(bytes)"(data: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    getDataParameter(
      oracle1: string,
      oracle2: string,
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDataParameter(address,address,bytes,bytes)"(
      oracle1: string,
      oracle2: string,
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "name(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    peek(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "peek(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "symbol(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get(data: BytesLike, overrides?: Overrides): Promise<PopulatedTransaction>;

    "get(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDataParameter(
      oracle1: string,
      oracle2: string,
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDataParameter(address,address,bytes,bytes)"(
      oracle1: string,
      oracle2: string,
      data1: BytesLike,
      data2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "name(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    peek(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "peek(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "symbol(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
